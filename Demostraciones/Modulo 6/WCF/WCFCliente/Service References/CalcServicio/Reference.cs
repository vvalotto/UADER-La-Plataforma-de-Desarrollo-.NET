//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.34014
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFCliente.CalcServicio {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Resultado", Namespace="http://schemas.datacontract.org/2004/07/WcfCalculo")]
    [System.SerializableAttribute()]
    public partial class Resultado : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MensajeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ValorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((this.ErrorField.Equals(value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mensaje {
            get {
                return this.MensajeField;
            }
            set {
                if ((object.ReferenceEquals(this.MensajeField, value) != true)) {
                    this.MensajeField = value;
                    this.RaisePropertyChanged("Mensaje");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Valor {
            get {
                return this.ValorField;
            }
            set {
                if ((this.ValorField.Equals(value) != true)) {
                    this.ValorField = value;
                    this.RaisePropertyChanged("Valor");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalcServicio.ICalculadoraServicio")]
    public interface ICalculadoraServicio {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadoraServicio/Sumar", ReplyAction="http://tempuri.org/ICalculadoraServicio/SumarResponse")]
        WCFCliente.CalcServicio.Resultado Sumar(decimal operador1, decimal operador2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadoraServicio/Sumar", ReplyAction="http://tempuri.org/ICalculadoraServicio/SumarResponse")]
        System.Threading.Tasks.Task<WCFCliente.CalcServicio.Resultado> SumarAsync(decimal operador1, decimal operador2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadoraServicio/Restar", ReplyAction="http://tempuri.org/ICalculadoraServicio/RestarResponse")]
        WCFCliente.CalcServicio.Resultado Restar(decimal operador1, decimal operador2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadoraServicio/Restar", ReplyAction="http://tempuri.org/ICalculadoraServicio/RestarResponse")]
        System.Threading.Tasks.Task<WCFCliente.CalcServicio.Resultado> RestarAsync(decimal operador1, decimal operador2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadoraServicio/Multiplicar", ReplyAction="http://tempuri.org/ICalculadoraServicio/MultiplicarResponse")]
        WCFCliente.CalcServicio.Resultado Multiplicar(decimal operador1, decimal operador2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadoraServicio/Multiplicar", ReplyAction="http://tempuri.org/ICalculadoraServicio/MultiplicarResponse")]
        System.Threading.Tasks.Task<WCFCliente.CalcServicio.Resultado> MultiplicarAsync(decimal operador1, decimal operador2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadoraServicio/Dividir", ReplyAction="http://tempuri.org/ICalculadoraServicio/DividirResponse")]
        WCFCliente.CalcServicio.Resultado Dividir(decimal numerador, decimal denominador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadoraServicio/Dividir", ReplyAction="http://tempuri.org/ICalculadoraServicio/DividirResponse")]
        System.Threading.Tasks.Task<WCFCliente.CalcServicio.Resultado> DividirAsync(decimal numerador, decimal denominador);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculadoraServicioChannel : WCFCliente.CalcServicio.ICalculadoraServicio, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculadoraServicioClient : System.ServiceModel.ClientBase<WCFCliente.CalcServicio.ICalculadoraServicio>, WCFCliente.CalcServicio.ICalculadoraServicio {
        
        public CalculadoraServicioClient() {
        }
        
        public CalculadoraServicioClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculadoraServicioClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculadoraServicioClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculadoraServicioClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFCliente.CalcServicio.Resultado Sumar(decimal operador1, decimal operador2) {
            return base.Channel.Sumar(operador1, operador2);
        }
        
        public System.Threading.Tasks.Task<WCFCliente.CalcServicio.Resultado> SumarAsync(decimal operador1, decimal operador2) {
            return base.Channel.SumarAsync(operador1, operador2);
        }
        
        public WCFCliente.CalcServicio.Resultado Restar(decimal operador1, decimal operador2) {
            return base.Channel.Restar(operador1, operador2);
        }
        
        public System.Threading.Tasks.Task<WCFCliente.CalcServicio.Resultado> RestarAsync(decimal operador1, decimal operador2) {
            return base.Channel.RestarAsync(operador1, operador2);
        }
        
        public WCFCliente.CalcServicio.Resultado Multiplicar(decimal operador1, decimal operador2) {
            return base.Channel.Multiplicar(operador1, operador2);
        }
        
        public System.Threading.Tasks.Task<WCFCliente.CalcServicio.Resultado> MultiplicarAsync(decimal operador1, decimal operador2) {
            return base.Channel.MultiplicarAsync(operador1, operador2);
        }
        
        public WCFCliente.CalcServicio.Resultado Dividir(decimal numerador, decimal denominador) {
            return base.Channel.Dividir(numerador, denominador);
        }
        
        public System.Threading.Tasks.Task<WCFCliente.CalcServicio.Resultado> DividirAsync(decimal numerador, decimal denominador) {
            return base.Channel.DividirAsync(numerador, denominador);
        }
    }
}
